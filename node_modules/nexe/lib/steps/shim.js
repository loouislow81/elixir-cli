"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function wrap(code) {
    return '!(function () {' + code + '})();';
}
function default_1(compiler, next) {
    compiler.shims.push(wrap(compiler.getHeader()));
    compiler.shims.push(wrap("\n    if (process.argv[1] && process.env.NODE_UNIQUE_ID) {\n      const cluster = require('cluster')\n      cluster._setupWorker()\n      delete process.env.NODE_UNIQUE_ID\n    }\n  "));
    if (compiler.options.resources.length) {
        compiler.shims.push(wrap("\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = require(\"assert\");\nvar path_1 = require(\"path\");\nvar binary = process.__nexe;\nassert_1.ok(binary);\nvar manifest = binary.resources;\nvar directories = {};\nvar isString = function (x) { return typeof x === 'string' || x instanceof String; };\nvar isNotFile = function () { return false; };\nvar isNotDirectory = isNotFile;\nvar isFile = function () { return true; };\nvar isDirectory = isFile;\nif (Object.keys(manifest).length) {\n    var fs_1 = require('fs');\n    var originalReadFile_1 = fs_1.readFile;\n    var originalReadFileSync_1 = fs_1.readFileSync;\n    var originalReaddir_1 = fs_1.readdir;\n    var originalReaddirSync_1 = fs_1.readdirSync;\n    var originalStatSync_1 = fs_1.statSync;\n    var originalStat_1 = fs_1.stat;\n    var resourceStart_1 = binary.layout.resourceStart;\n    var statTime_1 = function () {\n        var stat = binary.layout.stat;\n        return {\n            dev: 0,\n            ino: 0,\n            nlink: 0,\n            rdev: 0,\n            uid: 123,\n            gid: 500,\n            blksize: 4096,\n            blocks: 0,\n            atime: new Date(stat.atime),\n            atimeMs: stat.atime.getTime(),\n            mtime: new Date(stat.mtime),\n            mtimeMs: stat.mtime.getTime(),\n            ctime: new Date(stat.ctime),\n            ctimMs: stat.ctime.getTime(),\n            birthtime: new Date(stat.birthtime),\n            birthtimeMs: stat.birthtime.getTime()\n        };\n    };\n    var createStat_1 = function (directoryExtensions, fileExtensions) {\n        if (!fileExtensions) {\n            return Object.assign({}, binary.layout.stat, directoryExtensions, { size: 0 }, statTime_1());\n        }\n        var size = directoryExtensions[1];\n        return Object.assign({}, binary.layout.stat, fileExtensions, { size: size }, statTime_1());\n    };\n    var ownStat_1 = function (path) {\n        var key = path_1.resolve(path);\n        if (directories[key]) {\n            return createStat_1({ isDirectory: isDirectory, isFile: isNotFile });\n        }\n        if (manifest[key]) {\n            return createStat_1(manifest[key], { isFile: isFile, isDirectory: isNotDirectory });\n        }\n    };\n    var setupManifest_1 = function () {\n        Object.keys(manifest).forEach(function (key) {\n            var absolutePath = path_1.resolve(key);\n            var dirPath = path_1.dirname(absolutePath);\n            directories[dirPath] = directories[dirPath] || {};\n            directories[dirPath][path_1.basename(absolutePath)] = true;\n            if (!manifest[absolutePath]) {\n                manifest[absolutePath] = manifest[key];\n            }\n            var normalizedPath = path_1.normalize(key);\n            if (!manifest[normalizedPath]) {\n                manifest[normalizedPath] = manifest[key];\n            }\n        });\n        setupManifest_1 = function () { };\n    };\n    //naive patches intended to work for most use cases\n    var nfs = {\n        readdir: function readdir(path, options, callback) {\n            setupManifest_1();\n            path = path.toString();\n            if ('function' === typeof options) {\n                callback = options;\n                options = { encoding: 'utf8' };\n            }\n            var dir = directories[path_1.resolve(path)];\n            if (dir) {\n                process.nextTick(function () {\n                    callback(null, Object.keys(dir));\n                });\n            }\n            else {\n                return originalReaddir_1.apply(fs_1, arguments);\n            }\n        },\n        readdirSync: function readdirSync(path, options) {\n            setupManifest_1();\n            path = path.toString();\n            var dir = directories[path_1.resolve(path)];\n            if (dir) {\n                return Object.keys(dir);\n            }\n            return originalReaddirSync_1.apply(fs_1, arguments);\n        },\n        readFile: function readFile(file, options, callback) {\n            setupManifest_1();\n            var entry = manifest[file];\n            if (!entry || !isString(file)) {\n                return originalReadFile_1.apply(fs_1, arguments);\n            }\n            var offset = entry[0], length = entry[1];\n            var resourceOffset = resourceStart_1 + offset;\n            var encoding = isString(options) ? options : null;\n            callback = typeof options === 'function' ? options : callback;\n            fs_1.open(process.execPath, 'r', function (err, fd) {\n                if (err)\n                    return callback(err, null);\n                fs_1.read(fd, Buffer.alloc(length), 0, length, resourceOffset, function (error, bytesRead, result) {\n                    if (error) {\n                        return fs_1.close(fd, function () {\n                            callback(error, null);\n                        });\n                    }\n                    fs_1.close(fd, function (err) {\n                        if (err) {\n                            return callback(err, result);\n                        }\n                        callback(err, encoding ? result.toString(encoding) : result);\n                    });\n                });\n            });\n        },\n        readFileSync: function readFileSync(file, options) {\n            setupManifest_1();\n            var entry = manifest[file];\n            if (!entry || !isString(file)) {\n                return originalReadFileSync_1.apply(fs_1, arguments);\n            }\n            var offset = entry[0], length = entry[1];\n            var resourceOffset = resourceStart_1 + offset;\n            var encoding = isString(options) ? options : null;\n            var fd = fs_1.openSync(process.execPath, 'r');\n            var result = Buffer.alloc(length);\n            fs_1.readSync(fd, result, 0, length, resourceOffset);\n            fs_1.closeSync(fd);\n            return encoding ? result.toString(encoding) : result;\n        },\n        statSync: function statSync(path) {\n            var stat = ownStat_1(path);\n            if (stat) {\n                return stat;\n            }\n            return originalStatSync_1.apply(fs_1, arguments);\n        },\n        stat: function stat(path, callback) {\n            var stat = ownStat_1(path);\n            if (stat) {\n                process.nextTick(function () {\n                    callback(null, stat);\n                });\n            }\n            else {\n                return originalStat_1.apply(fs_1, arguments);\n            }\n        }\n    };\n    Object.assign(fs_1, nfs);\n}\n"));
    }
    //compiler.shims.push(wrap('{/{replace:lib/steps/shim-require.js}}'))
    if (compiler.options.fakeArgv !== false) {
        var nty = !process.stdin.isTTY;
        var input = nty ? '[stdin]' : JSON.stringify(compiler.options.input);
        compiler.shims.push(wrap("\n      var r = require('path').resolve; \n      process.argv.splice(1,0, " + (nty ? "'" + input + "'" : "r(" + input + ")") + ");"));
    }
    return next();
}
exports.default = default_1;
